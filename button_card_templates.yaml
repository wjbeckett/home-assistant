  # !toggle word-wrap

  #################################################
  #                                               #
  #                     BASE                      #
  #                                               #
  #################################################

  base:
    aspect_ratio: 1/1
    show_state: true
    show_icon: false
    tap_action:
      ui_sound: |
        [[[
          if (entity.state === 'off' && states['switch.galaxy_tab_a_screensaver'].state === 'off') {
            hass.callService('media_player', 'play_media', {
              entity_id: 'media_player.tablet',
              media_content_id: '/local/sound/on.m4a',
              media_content_type: 'music'
            });
          } else if (entity.state === 'on' && states['switch.galaxy_tab_a_screensaver'].state === 'off') {
            hass.callService('media_player', 'play_media', {
              entity_id: 'media_player.tablet',
              media_content_id: '/local/sound/off.m4a',
              media_content_type: 'music'
            });
          }
        ]]]
      action: toggle
      haptic: light
    styles:
      name:
        - top: 57.7%
        - left: 10.1%
        - line-height: 2vw
        - position: absolute
      state:
        - top: 74%
        - left: 11%
        - line-height: 2vw
        - position: absolute
      card:
        - font-family: Sf Display
        - letter-spacing: 0.05vw
        - font-weight: 400
        - font-size: 1.34vw
        - border-radius: 0.8vw
        - transition: none
        - color: >
            [[[ return (entity.state === 'on' || entity.state === 'home') ? 'rgba(0, 0, 0, 0.6)' : 'rgba(255, 255, 255, 0.3)'; ]]]
        - background-color: >
            [[[ return (entity.state === 'on' || entity.state === 'home') ? 'rgba(255, 255, 255, 0.8)' : 'rgba(115, 115, 115, 0.2)'; ]]]

  #################################################
  #                                               #
  #                    CIRCLE                     #
  #                                               #
  #################################################

  circle:
    custom_fields:
      circle: >
        [[[
          if (entity.state === 'on') {
            const input = variables.circle_input;
            const radius = 20.5;
            const circumference = radius * 2 * Math.PI;
            return `
              <svg viewBox="0 0 50 50">
                <style>
                  circle {
                    transform: rotate(-90deg);
                    transform-origin: 50% 50%;
                    stroke-dasharray: ${circumference};
                    stroke-dashoffset: ${circumference - input / 100 * circumference};
                  }
                  tspan {
                    font-size: 10px;
                  }
                </style>
                <circle cx="25" cy="25" r="${radius}" stroke="#b2b2b2" stroke-width="1.5" fill="none" />
                <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${input}<tspan font-size="10">%</tspan></text>
              </svg>
            `;
          }
        ]]]
    styles:
      custom_fields:
        circle: &person
          - top: 8.5%
          - left: 56.2%
          - width: 3.5vw
          - position: absolute
          - letter-spacing: 0.03vw

  #################################################
  #                                               #
  #                    LOADER                     #
  #                                               #
  #################################################

  loader:
    custom_fields:
      loader: >
        [[[
          if (states[entity.entity_id.replace(entity.entity_id.split('.')[0], 'input_boolean')].state === 'on') {
            return '<img src="/local/loader.svg" width="100%">';
          }
        ]]]
    styles:
      custom_fields:
        loader:
          - top: 3%
          - left: 60%
          - width: 3.7vw
          - position: absolute
          - opacity: 0.6
          - filter: >
              [[[ return entity.state === 'off' ? 'invert(1)' : 'none'; ]]]

  #################################################
  #                                               #
  #                     LIGHT                     #
  #                                               #
  #################################################

  light:
    template:
      - base
      - circle
    variables:
      circle_input: >
        [[[ return Math.round(entity.attributes.brightness / 2.54); ]]]
    hold_action:
      action: fire-dom-event
      browser_mod:
        command: popup
        title: >
          [[[ return entity.attributes.friendly_name ]]]
        card:
          type: entities
          entities:
            - type: custom:light-popup-card
              entity: >
                [[[ return entity.entity_id ]]]
              icon: none
              fullscreen: false
              brightnessWidth: 130px
              brightnessHeight: 360px
              borderRadius: 1.7em
              sliderColor: '#c7c7c7'
              sliderTrackColor: rgba(25, 25, 25, 0.9)
            - type: custom:hui-element
              card_type: horizontal-stack
              card_mod:
                style: >
                  #root {
                    justify-content: center;
                    margin-top: 2em;
                  }
              cards:
                - type: custom:button-card
                  styles:
                    card:
                      - background: '#d8d9e1'
                  tap_action:
                    action: call-service
                    service: light.turn_on
                    service_data:
                      entity_id: >
                        [[[ return entity.entity_id ]]]
                      color_temp: 153
                  template: color_light
                - type: custom:button-card
                  styles:
                    card:
                      - background: '#d5b08d'
                  tap_action:
                    action: call-service
                    service: light.turn_on
                    service_data:
                      entity_id: >
                        [[[ return entity.entity_id ]]]
                      color_temp: 326
                  template: color_light
            - type: custom:hui-element
              card_type: horizontal-stack
              card_mod:
                style: >
                  #root {
                    justify-content: center;
                    margin-bottom: 1em;
                  }
              cards:
                - type: custom:button-card
                  styles:
                    card: 
                      - background: '#ce944b'
                  tap_action:
                    action: call-service
                    service: light.turn_on
                    service_data:
                      entity_id: >
                        [[[ return entity.entity_id ]]]
                      color_temp: 500
                  template: color_light
                - type: custom:button-card
                  styles:
                    card:
                      [background: 'radial-gradient(circle, rgba(255, 255, 255, 1) 0%, rgba(255, 255, 255, 0) 80%), 
                      conic-gradient(rgb(120, 39, 230), rgb(230, 34, 231), rgb(228, 5, 136), rgb(228, 25, 25), 
                      rgb(229, 105, 30), rgb(232, 226, 46), rgb(125, 230, 41), rgb(52, 232, 40), rgb(51, 231, 92), 
                      rgb(52, 232, 224), rgb(32, 125, 229), rgb(18, 39, 229), rgb(120, 39, 230))']
                  tap_action:
                    action: fire-dom-event
                    browser_mod:
                      command: popup
                      title: >
                        [[[ return entity.attributes.friendly_name ]]]
                      card:
                        type: custom:light-entity-card
                        entity: >
                          [[[ return entity.entity_id ]]]
                        brightness: true
                        color_temp: true
                        full_width_sliders: false
                        hide_header: true
                        show_slider_percent: true
                        smooth_color_wheel: true
                        persist_features: true
                        consolidate_entities: true
                  template: color_light

  #################################################
  #                                               #
  #                    PERSON                     #
  #                                               #
  #################################################

  person:
    template: base
    show_entity_picture: true
    state_display: >
      [[[ return entity.state === 'home' ? 'Yes' : 'No'; ]]]
    styles:
      entity_picture: 
        - clip-path: circle(50% at center)
        - top: 7.5%
        - left: 11.2%
        - width: 3vw
        - position: absolute
      custom_fields:
        circle: *person
    custom_fields:
      circle: >
        [[[
          function time(c) {
            var s = (c / 1000);
            var m = (c / (1000 * 60));
            var h = (c / (1000 * 60 * 60));
            var d = (c / (1000 * 60 * 60 * 24));
            if (s < 60) {
              return parseInt(s) + 's';
            } else if (m < 60) {
              return parseInt(m) + 'm';
            } else if (h < 24) {
              return parseInt(h) + 'h';
            } else {
              return parseInt(d) + 'd';
            }
          }
          const last_changed = time(Date.now() - Date.parse(states[entity.entity_id].last_changed));
          const stroke_color = entity.state === 'home' ? '#b2b2b2' : '#313638';
          const fill_color = entity.state === 'home' ? 'none' : '#FFFFFF08';
          return `
            <svg viewBox="0 0 50 50">
              <style>
                circle {
                  transform: none;
                  transform-origin: none;
                  stroke-dasharray: none;
                  stroke-dashoffset: none;
                }
              </style>
              <circle cx="25" cy="25" r="20.5" stroke="${stroke_color}" stroke-width="1.5" fill="${fill_color}" />
              <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${last_changed}</text>
            </svg>
          `;
        ]]]

  #################################################
  #                                               #
  #                  BASE MEDIA                   #
  #                                               #
  #################################################

  base_media:
    tap_action:
      action: >
        [[[
          if (entity.state === 'off' || entity.state === 'idle' || entity.state === 'standby') {
            return 'none';
          } else {
            return 'call-service';
          }
        ]]]
      service: media_player.media_play_pause
      service_data:
        entity_id: >
          [[[ return entity.entity_id ]]]
    double_tap_action:
      action: call-service
      service: >
        [[[
          if (entity.state === 'off' || entity.state === 'idle' || entity.state === 'standby') {
            return 'media_player.turn_on';
          } else {
            return 'media_player.turn_off';
          }
        ]]]
      service_data:
        entity_id: >
          [[[ return entity.entity_id ]]]
    styles:
      card:
        - color: >
            [[[
              if (entity.state === 'off' || entity.state === 'idle' || entity.state === 'standby' ||
                entity.state === 'unknown' || entity.state === 'unavailable') {
                return 'rgba(255, 255, 255, 0.3)';
              }
              if ((entity.state != 'off' && entity.state != 'idle' && entity.state != 'standby') && (entity.attributes.entity_picture == null)) {
                return 'rgba(0, 0, 0, 0.6)';
              } else {
                return '#efefef';
              }
            ]]]
        - text-shadow: >
            [[[ return entity.attributes.entity_picture == null ? 'none' : '1px 1px 5px rgba(18, 22, 23, 0.9)'; ]]]

  #################################################
  #                                               #
  #                     MEDIA                     #
  #                                               #
  #################################################

  media:
    template:
      - base
      - base_media
    styles:
      custom_fields:
        icon:
          - top: 11.5%
          - left: 11.5%
          - width: 2.9vw
          - position: absolute
          - fill: '#9da0a2'
          - opacity: >
              [[[ return entity.attributes.entity_picture == null ? 1 : 0; ]]]
      card:
        - background-color: none
        - background-size: cover
        - background-image: >
            [[[
              if (entity.state === 'off' || entity.state === 'idle' || entity.state === 'standby' ||
                entity.state === 'unknown' || entity.state === 'unavailable') {
                return 'linear-gradient(0deg, rgba(115, 115, 115, 0.2) 0%, rgba(115, 115, 115, 0.2) 100%)';
              }
              if ((entity.state != 'off' && entity.state != 'idle' && entity.state != 'standby') && (entity.attributes.entity_picture == null)) {
                return 'linear-gradient(0deg, rgba(255, 255, 255, 0.8) 0%, rgba(255, 255, 255, 0.8) 100%)';
              } else {
                return 'linear-gradient(0deg, rgba(0,0,0,.8) 0%, rgba(0,0,0,0) 100%), url(' + entity.attributes.entity_picture + ')';
              }
            ]]]

  #################################################
  #                                               #
  #               CONDITIONAL MEDIA               #
  #                                               #
  #################################################

  conditional_media:
    template:
      - base
      - base_media
    state_display: >
      [[[
        if (entity.attributes.media_title === 'Nothing playing' || entity.attributes.media_title === 'No title' && entity.state === 'paused') {
          return 'Nothing is playing';
        }
        if (entity.attributes.media_title === 'No title' && entity.state === 'playing') {
          return 'No title';
        } else {
          return entity.attributes.media_title;
        }
      ]]]
    custom_fields:
      media_image: >
        <svg viewBox="0 0 50 50" />
      blur: >
        [[[
          if (entity.attributes.entity_picture != null) {
            return '<svg viewBox="0 0 50 50" />';
          }
        ]]]
      overlay: >
        [[[
          if (entity.state != 'off' && entity.state != 'idle' && entity.state != 'standby' && entity.state != 'unavailable') {
            return '<svg viewBox="0 0 50 50" />';
          }
        ]]]
      play_pause: >
        [[[
          const style = `
            <style>
              .scale-up {
                animation: scale-up 0.3s;
                cubic-bezier(.05, .5, .3, 1) 1;
                transform-origin: center center;
              }

              @keyframes scale-up {
                0% {
                  opacity: 0;
                  transform: scale(0);
                }
                100% {
                  opacity: 1;
                  transform: scale(1);
                }
              }
            </style>
          `;
          if (entity.state === 'playing') {
            return `
              <svg viewBox="0 0 166 166">${style}
                <path class="scale-up" d="M0 0h59.9v166H0zm106.1 0H166v166h-59.9z"/>
              </svg>
            `;
          }
          if (entity.state === 'paused') {
            return `
              <svg viewBox="0 0 166 166">${style}
                <path class="scale-up" d="M0 0l166 83L0 166z"/>
              </svg>
            `;
          }
        ]]]
    styles:
      name:
        - top: 79.8%
        - left: 5.3%
        - position: absolute
        - line-height: 2vw
        - z-index: 10
      state:
        - top: 87.5%
        - left: 5.3%
        - position: absolute
        - line-height: 2vw
        - z-index: 10
        - white-space: nowrap
        - overflow: hidden
        - text-overflow: ellipsis
        - max-width: 90%
      custom_fields:
        media_image:
          - top: 0%
          - left: 0%
          - width: 100%
          - position: absolute
          - background-size: cover
          - background-image: >
              [[[ 
                return entity.attributes.entity_picture == null ? 'linear-gradient(0deg, rgba(115, 115, 115, 0.2) 0%, rgba(115, 115, 115, 0.2) 100%)' :
                'linear-gradient(0deg, rgba(13,17,19,0.9) 0%, rgba(13,17,19,0) 50%), url(' + entity.attributes.entity_picture + ')';
              ]]]
        blur:
          - top: 0%
          - left: 0%
          - width: 100%
          - position: absolute
          - filter: blur(4px)
          - clip-path: inset(16vw 0 0 0)
          - background-size: cover
          - background-image: >
              [[[ return entity.attributes.entity_picture == null ? 'none' : 'url(' + entity.attributes.entity_picture + ')'; ]]]
        overlay:
          - top: 16vw
          - left: 0%
          - width: 100%
          - position: absolute
          - opacity: 1
          - z-index: 0
          - background-size: cover
          - background: >
              [[[ return entity.attributes.entity_picture == null ? 'rgba(255, 255, 255, 0.8)' : 'rgba(0, 0, 0, 0.4)'; ]]]
        play_pause:
          - top: 0
          - right: 0
          - bottom: 0
          - left: 0
          - margin: auto
          - width: 21%
          - height: 21%
          - position: absolute
          - fill: '#dedede'
          - filter: >
              [[[ return entity.attributes.entity_picture == null ? 'none' : 'drop-shadow(0 0 1.3vw rgba(0,0,0,0.7))'; ]]]
        icon:
          - top: 5.35%
          - left: 5.35%
          - width: 2.95vw
          - position: absolute
          - fill: >
              [[[ 
                if (entity.state === 'off' || entity.state === 'idle' || entity.state === 'standby' ||
                  entity.state === 'unknown' || entity.state === 'unavailable') return '#9da0a2';
                else return 'rgba(255, 255, 255, 0.8)';
              ]]]

  #################################################
  #                                               #
  #              RECENTLY DOWNLOADED              #
  #                                               #
  #################################################

  recently_downloaded:
    name: Senast nedladdat
    state_display: >
      [[[
        const data = states[entity.entity_id].attributes.data;
        const number = data[1].number == undefined ? '(' + data[1].aired.split('-')[0] + ')' : data[1].number;
        return `${data[1].title} ${number}`;
      ]]]
    custom_fields:
      blur: >
        <svg viewBox="0 0 50 50" /></svg>
    styles:
      custom_fields:
        media_image: &blur
          - background-position: center center
          - background-image: >
              [[[ return 'url(' + states[entity.entity_id].attributes.data[1].fanart + ')'; ]]]
        blur: *blur
        overlay:
          - background: 'rgba(0, 0, 0, 0.4)'
      card:
        - color: '#efefef'
        - text-shadow: '1px 1px 5px rgba(18, 22, 23, 0.9)'

  #################################################
  #                                               #
  #                    LAUNDRY                    #
  #                                               #
  #################################################

  laundry:
    show_icon: false
    show_name: false
    show_state: true
    tap_action:
      services: >
        [[[
          hass.callService('timer', 'cancel', {
            entity_id: entity.entity_id
          });
          hass.callService('timer', 'start', {
            entity_id: entity.entity_id
          });
        ]]]
    hold_action:
      services: >
        [[[
          hass.callService('timer', 'cancel', {
            entity_id: entity.entity_id
          });
          hass.callService('input_boolean', 'turn_off', {
            entity_id: 'input_boolean.laundry_timer_visibility'
          });
        ]]]
    styles:
      card:
        - background: '#202a2f30'
        - border-radius: 0.7vw
        - border: '0.2vw solid #292c2e'
      state:
        - font-size: 2.7vw
        - font-family: SF Mono
        - opacity: 0.65
        - padding: 0.55vw 1.2vw 0.5vw 1.2vw

  #################################################
  #                                               #
  #                 POPUP BUTTONS                 #
  #                                               #
  #################################################

  icon_name:
    size: 1.4em
    color: '#9da0a2'
    styles:
      grid:
        - grid-template-areas: '"i n"'
        - grid-column-gap: 0.3em
      card:
        - color: '#9da0a2'
        - border-radius: 0.6em
        - padding: 1em 1.4em 1em 1.2em
        - width: 100%
        - font-size: 1.06em
        - font-weight: 500
        - letter-spacing: 0.015em
        - background: '#FFFFFF10'

  icon_only:
    color: '#9da0a2'
    styles:
      card:
        - color: '#9da0a2'
        - border-radius: 0.6em
        - width: 4em
        - height: 3.7em
        - background: '#FFFFFF10'

  color_light:
    styles:
      card:
        - border-radius: 50%
        - height: 4em
        - width: 4em
        - margin: 4px

  #################################################
  #                                               #
  #                     ICONS                     #
  #                                               #
  #################################################

  icon_plex:
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M7.7.3h34.6c4.1 0 7.4 3.3 7.4 7.4v34.6c0 4.1-3.3 7.4-7.4 7.4H7.7c-4.1 0-7.4-3.3-7.4-7.4V7.7C.3 3.6 3.6.3 7.7.3z" fill="#282a2d"/>
          <path d="M25,7.1H14.6L25,25L14.6,42.9H25L35.4,25L25,7.1z" fill="#e5a00d"/>
        </svg>

  icon_apple_tv:
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M25.2 49.7l-13.7-.1c-2.4 0-4.6-.8-6.5-2.2-2-1.6-3.6-3.6-4.3-6.2-.2-1-.2-1.9-.3-3V11.5C.5 7.9 1.9 5 4.8 2.7 6.2 1.6 7.8.8 9.6.5c.5-.1.9-.1 1.4-.1L27.5.3l10.9.1c2.6 0 4.8.8 6.7 2.4 2.1 1.7 3.7 3.9 4.2 6.6l.2 2.4.1 20.5-.1 6.7c-.1 2.2-.9 4.2-2.2 5.9-1.7 2.2-4 3.8-6.8 4.4-.6.1-1.2.2-1.9.2-.1.1-13.4.2-13.4.2zm-4-27.8c-.9-1.2-2.2-1.6-3.7-1.2-.4.1-.8.2-1.2.4-.3.1-.6.1-.8 0-.4-.1-.8-.3-1.2-.4-.3-.1-.7-.1-1-.1-1.5.2-2.4 1.1-3 2.6-.4 1.1-.3 2.2 0 3.5.4 1.5 1 2.9 2.1 4 .5.6 1.2.9 2 .6 1.1-.5 2.2-.5 3.4 0 .8.3 1.5 0 2.1-.6.7-.8 1.1-1.8 1.6-2.8v-.2c-1-.6-1.7-1.4-1.8-2.7-.2-1.4.5-2.4 1.5-3.1zm9.9-1.4c.1.2.1.3.1.4l3.6 9.5c.1.3.3.4.6.4h.7c.6 0 .6 0 .9-.6l3.7-9.4c.1-.1.1-.3.2-.5H39l-2.9 8.3-3.1-8.3-1.9.2zM27.3 18l-1.3.4c-.5.2-.5.2-.6.7v1.4h-1.6l.1 1.4h1.5v5c0 .7.1 1.4.2 2.1.1.5.3 1 .8 1.4.8.6 2.6.7 3.5.2l-.1-1.2h-1.3c-.5 0-.9-.3-1-.8-.1-.3-.2-.6-.2-1v-5.8H30c0-.5.1-1 0-1.4h-2.7V18zm-8.8-.9c-1.9.3-3 2-2.7 3.2 1.4.2 2.9-1.7 2.7-3.2z"/>
        </svg>

  icon_spotify:
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M25 .3C11.4.3.3 11.4.3 25S11.4 49.7 25 49.7 49.7 38.6 49.7 25 38.6.3 25 .3zm11.3 35.6c-.4.7-1.4 1-2.1.5-5.8-3.5-13.1-4.3-21.7-2.4-.8.2-1.7-.3-1.8-1.2-.2-.8.3-1.7 1.2-1.8 9.4-2.2 17.5-1.2 24 2.8.6.5.9 1.4.4 2.1zm3.1-6.7c-.6.9-1.7 1.2-2.6.6-6.6-4.1-16.8-5.3-24.6-2.9a1.96 1.96 0 0 1-2.4-1.3 1.96 1.96 0 0 1 1.3-2.4c9-2.7 20.1-1.4 27.7 3.3.8.6 1.1 1.8.6 2.7h0zm.2-7c-8-4.7-21.1-5.2-28.7-2.9-1.2.4-2.5-.3-2.9-1.5s.3-2.5 1.5-2.9c8.7-2.6 23.2-2.1 32.4 3.3 1.1.7 1.5 2.1.8 3.2-.6 1.1-2 1.4-3.1.8h0z"/>
        </svg>

  icon_nest_mini:
    custom_fields:
      icon: >
        <svg viewBox="0 0 50 50">
          <path d="M49.7 25c0 13.6-11.1 24.7-24.8 24.7C11.3 49.7.3 38.6.3 25S11.4.3 25 .3 49.7 11.4 49.7 25zm-33.9 0a2.22 2.22 0 0 0-2.2-2.2c-1.2 0-2.3 1-2.3 2.2a2.22 2.22 0 0 0 2.2 2.2c1.3.1 2.3-.9 2.3-2.2h0zm10.8 0c0 1.2.9 2.2 2.2 2.3 1.3 0 2.3-1 2.3-2.2 0-1.3-1-2.3-2.2-2.3-1.3 0-2.3.9-2.3 2.2zm-3.2 0a2.22 2.22 0 0 0-2.2-2.2c-1.2 0-2.3 1-2.3 2.2a2.22 2.22 0 0 0 2.2 2.2c1.3 0 2.3-.9 2.3-2.2h0zm13 2.2a2.22 2.22 0 0 0 2.2-2.2c0-1.2-1-2.3-2.2-2.3a2.22 2.22 0 0 0-2.2 2.2c0 1.3 1 2.3 2.2 2.3z" />
        </svg>

  icon_hue:
    styles:
      custom_fields:
        icon_hue:
          - top: 11%
          - left: 4.5%
          - width: 3.05vw
          - position: absolute
    custom_fields:
      icon_hue: >
        [[[
          const state = entity.state === 'on' ? 'animate' : null;
          return `
            <svg viewBox="0 0 50 50">
              <style>
                @keyframes animate {
                  0% {
                    transform: scale(0.85);
                  }
                  20% {
                    transform: scale(1.1);
                  }
                  40% {
                    transform: scale(0.95);
                  }
                  60% {
                    transform: scale(1.03);
                  }
                  80% {
                    transform: scale(0.97);
                  }
                  100% {
                    transform: scale(1);
                  }
                }
                .animate {
                  animation: animate 0.8s;
                  transform-origin: center;
                }
              </style>
              <path fill="#9da0a2" d="M27.4 47.3h-4.9s-.7.1-.7.8.4.9.7.9h4.9c.3 0 .7-.1.7-.9s-.7-.8-.7-.8zm3.3-2.9H19.3s-.8 0-.8.8.6.9.8.9h11.5c.2 0 .8-.1.8-.9-.1-.8-.9-.8-.9-.8zm0-3H19.3s-.8 0-.8.8.6.9.8.9h11.5c.2 0 .8-.1.8-.9-.1-.8-.9-.8-.9-.8zm0-2.9H19.3s-.8 0-.8.8.6.9.8.9h11.5c.2 0 .8-.1.8-.9s-.9-.8-.9-.8zm5.2-23.2c-3.3-5.3-7-5.6-10.9-5.6-3.8 0-8.4.4-10.9 5.6-.1.1-.1.3.1.7.4.8 3.3 7.2 3.2 18.8 0 1.1-.1 1.6 0 1.7 0 .1 0 .7 1.1.7h13c1 0 1-.5 1.1-.7v-1.7c-.1-11.6 2.8-18 3.2-18.8.1-.4.1-.5.1-.7"/>
              <path class="${state}" fill="var(--button-card-light-color-no-temperature)" d="M14.1 15.3c3.4-.3 7-.4 10.9-.4 3.8 0 7.5.2 10.9.4.4-.4.7-.8.9-1.1C39 8.5 38.9 6.5 38.9 6c-.2-4.4-8.4-5-12.1-5h0-3.4c-3.7 0-12 .5-12.1 5 0 .5-.1 2.5 2.1 8.2 0 .3.3.8.7 1.1z"/>
            </svg>
          `;
        ]]]

  icon_shade:
    styles:
      custom_fields:
        icon_shade:
          - top: 11%
          - left: 4.6%
          - width: 3.05vw
          - position: absolute
    custom_fields:
      icon_shade: >
        [[[
          const state = entity.state === 'on' ? 'animate' : null;
          return `
            <svg viewBox="0 0 50 50">
              <style>
                @keyframes animate {
                  0% {
                    transform: scale(0.85);
                  }
                  20% {
                    transform: scale(1.1);
                  }
                  40% {
                    transform: scale(0.95);
                  }
                  60% {
                    transform: scale(1.03);
                  }
                  80% {
                    transform: scale(0.97);
                  }
                  100% {
                    transform: scale(1);
                  }
                }
                .animate {
                  animation: animate 0.8s;
                  transform-origin: center;
                }
              </style>
              <path fill="#9da0a2" d="M26.4 25.6c.6-.3 1.1-.7 1.1-1.3L25 17.9l-2.5 6.4c0 .7.6 1.1 1.1 1.3v20.8h-5.5v2.7h13.7v-2.7h-5.5V25.6z"/>
              <path class="${state}" fill="var(--button-card-light-color-no-temperature)" d="M24.6.9l-9.4.5c-.6.1-1.9 0-2.5 2.1s-2.4 9.1-4 16.9c-.2.7-.5 2-.5 2.3s-.4 1.6.9 1.6c.8.1 7.4.3 15.9.3 8.6 0 15.1-.3 15.9-.3 1.3-.1.9-1.3.9-1.6s-.3-1.6-.5-2.3c-1.6-7.8-3.4-14.8-4-16.9s-1.9-2-2.5-2.1c-1.6-.2-6.9-.4-9.4-.5"/>
            </svg>
          `;
        ]]]

  icon_tv:
    styles:
      custom_fields:
        icon_tv:
          - top: 7%
          - left: 10.7%
          - width: 3.5vw
          - position: absolute
          - fill: >
              [[[ return entity.state === 'on' ? '#616161' : '#9da0a2'; ]]]
    tap_action:
      services: |
        [[[
          if (entity.state === 'off') {
            hass.callService('input_boolean', 'turn_on', {
              entity_id: entity.entity_id.replace(entity.entity_id.split('.')[0], 'input_boolean')
            });
            hass.callService('media_player', 'turn_on', {
              entity_id: entity.entity_id
            });
          }
          if (entity.state === 'on') {
            hass.callService('input_boolean', 'turn_on', {
              entity_id: entity.entity_id.replace(entity.entity_id.split('.')[0], 'input_boolean')
            });
            hass.callService('media_player', 'turn_off', {
              entity_id: entity.entity_id
            });
            hass.callService('media_player', 'turn_off', {
              entity_id: entity.entity_id.replace('sony_bravia', 'vardagsrum').replace('samsung_tv_remote', 'sovrum')
            });
          }
        ]]]
    custom_fields:
      icon_tv: >
        [[[
          const boolean = states[entity.entity_id.replace(entity.entity_id.split('.')[0], 'input_boolean')].state;
          const style = `
            <style>
              @keyframes animate_on {
                from {
                  transform: scaleY(0);
                }
                to {
                  transform: scaleY(1);
                }
              }
              .animate_on {
                animation: animate_on 1s;
                transform-origin: -100% 46%;
                animation-fill-mode: forwards;
              }
              @keyframes animate_off {
                from {
                  transform: scaleY(1);
                }
                to {
                  transform: scaleY(0);
                }
              }
              .animate_off {
                animation: animate_off 1s;
                transform-origin: -100% 46%;
                animation-fill-mode: forwards;
              }
            </style>
          `;
          const path = `
            <path d="M46 9.2v27.5H4.1V9.2H46m2.4-2.4H1.6v32.3h46.7c.1 0 .1-32.3.1-32.3zM11.9 43.2h26.3c.6 0 1.1-.4 1.1-1v-.3c0-.6-.4-1.1-1-1.1H11.9c-.6 0-1.1.4-1.1 1v.3a1.11 1.11 0 0 0 1.1 1.1z"/>
          `;
          const gradient = `
            <linearGradient id="A" gradientUnits="userSpaceOnUse" x1="5.401" y1="34.714" x2="43.817" y2="11.74">
              <stop offset="0" stop-color="#64acb7"/>
              <stop offset="1" stop-color="#7fdbe9"/>
            </linearGradient>
          `;
          if (entity.state === 'off' && boolean === 'off') {
            return `
              <svg viewBox="0 0 50 50"> ${style} ${gradient} 
                <path class="animate_off" d="M2.9,8h44.3v29.9H2.9V8z" fill="url(#A)"/> ${path} 
              </svg>
            `;
          }
          if (entity.state === 'on' && boolean === 'off') {
            return `
              <svg viewBox="0 0 50 50"> ${style} ${gradient} 
                <path d="M2.9,8h44.3v29.9H2.9V8z" fill="#20262890"/>
                <path class="animate_on" d="M2.9,8h44.3v29.9H2.9V8z" fill="url(#A)"/> ${path} 
              </svg>
            `;
          }
          if (entity.state === 'on' && boolean === 'on') {
            return `
              <svg viewBox="0 0 50 50"> ${gradient} 
                <path d="M2.9,8h44.3v29.9H2.9V8z" fill="url(#A)"/> ${path} 
              </svg>
            `;
          } else if (entity.state === 'off' && boolean === 'on') {
            return `
              <svg viewBox="0 0 50 50"> ${path} </svg>
            `;
          }
        ]]]

  icon_spot:
    styles:
      custom_fields:
        icon_spot:
          - top: 11.5%
          - left: 8%
          - width: 2.7vw
          - position: absolute
    custom_fields:
      icon_spot: >
        [[[
          const state = entity.state === 'on' ? 'animate_on' : 'animate_off';
          return `
            <svg viewBox="0 0 50 50">
              <style>
                @keyframes animate_on {
                  0% {
                    transform: rotateZ(0deg);
                    animation-timing-function: cubic-bezier(0.7, 0, 0.84, 0);
                  }
                  70% {
                    transform: rotateZ(-15deg);
                    animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
                  }
                  75% {
                    transform: rotateZ(-15deg);
                    animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
                  }
                  88% {
                    transform: rotateZ(-11deg);
                  }
                  100% {
                    transform: rotateZ(-15deg);
                  }
                }
                .animate_on {
                  animation: animate_on 0.7s;
                  transform-origin: 40% 20%;
                  animation-fill-mode: forwards;
                  animation-delay: -0.1s;
                }
                @keyframes animate_off {
                  0% {
                    transform: rotateZ(-15deg);
                    animation-timing-function: cubic-bezier(0.7, 0, 0.84, 0);
                  }
                  70% {
                    transform: rotateZ(0deg);
                    animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
                  }
                  75% {
                    transform: rotateZ(0deg);
                    animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
                  }
                  88% {
                    transform: rotateZ(-4deg);
                  }
                  100% {
                    transform: rotateZ(0deg);
                  }
                }
                .animate_off {
                  animation: animate_off 0.7s;
                  transform-origin: 40% 20%;
                  animation-fill-mode: forwards;
                }
              </style>
              <path style="clip-path: url(#mask);" fill="#9da0a2" d="M40.5.8H17.1c-.1 0-.1 0-.1.1A3.12 3.12 0 0 0 20.1 4h6.1c.1 0 .1 0 .1.1v7.4L18 19.1l3.6 3.5 9.1-8.6c.4-.4.6-1 .7-1.6V4c0-.1 0-.1.1-.1h6c1.7.1 3.1-1.3 3-3.1z"/>
              <defs>
                <clipPath id="mask">
                  <path class="${state}" d="M0 9.1h24l8.3 8.8H50V-9H0z"/>
                </clipPath>
              </defs>
              <path class="${state}" fill="var(--button-card-light-color-no-temperature)" d="M25.5 46.4s1.4.5 10.4-8.2c.5-.4 6.3-6.3 5.8-7.1-.7-.8-18.6-19.5-18.6-19.5s-.6-.9-8.6 6.4c-.6.5-8.7 8-7.7 9.1l18.7 19.3z"/>
            </svg>
          `;
        ]]]

  icon_monitors:
    styles:
      custom_fields:
        icon_monitors:
          - top: 11%
          - left: 7%
          - width: 2.8vw
          - position: absolute
    custom_fields:
      icon_monitors: >
        [[[
          if (entity.state === "on") {
            return `
              <svg viewBox="0 0 50 50">
                <style>
                  @keyframes cone {
                    35% {
                      transform: scale(0.8);
                      animation-timing-function: cubic-bezier(0, 0.55, 0.45, 1);
                    }
                    36% {
                      transform: translateY(0%);
                    }
                    49% {
                      transform: scale(1.25);
                    }
                    63% {
                      transform: scale(0.85);
                      animation-timing-function: cubic-bezier(0, 0.55, 0.45, 1);
                    }
                    77% {
                      transform: scale(1.15);
                      animation-timing-function: cubic-bezier(0, 0.55, 0.45, 1);
                    }
                    95% {
                      transform: scale(1);
                    }
                  }
                  .cone {
                    animation: cone 1.4s;
                    transform-origin: center;
                  }
                  @keyframes speaker {
                    0% {
                      transform: scale(1);
                    }
                    40% {
                      transform: scale(1);
                    }
                    49% {
                      transform: scale(0.95);
                    }
                    63% {
                      transform: scale(1);
                    }
                    77% {
                      transform: scale(0.95);
                    }
                    100% {
                      transform: scale(1);
                    }
                  }
                  .speaker {
                    animation: speaker 1.3s;
                    transform-origin: center;
                  }
                </style>
                <g class="speaker">
                  <path fill="#686868" d="M35.8 46.9H14.2c-1.1 0-2-1-2-2.3V6.7c0-1.3.9-2.3 2-2.3h21.5c1.1 0 2 1 2 2.3v37.9c0 1.2-.9 2.3-1.9 2.3z"/>
                  <path fill="#2a2a2a" d="M39.2 1H10.8C9.4 1 8.3 2.1 8.2 3.5v42.9a2.65 2.65 0 0 0 2.6 2.6h28.3c1.4 0 2.5-1.2 2.6-2.6V3.5c0-1.4-1.1-2.5-2.5-2.5zM25 7c1.3 0 2.4 1.1 2.4 2.4s-1.1 2.4-2.4 2.4-2.4-1.1-2.4-2.4C22.5 8 23.6 7 25 7zm10.2 35.5l-.4 1.9s-.2.6-.6.6H15.8c-.4 0-.6-.6-.6-.6s-.1-1.1-.4-1.9.6-.9.6-.9h19.3c0-.1.8-.1.5.9z"/>
                </g>
                <path class="cone" fill="#e5dd00" d="M25 15.7c-6.2 0-11.3 5.1-11.3 11.3S18.8 38.3 25 38.3 36.3 33.2 36.3 27c-.1-6.3-5.1-11.3-11.3-11.3zm0 14.5a3.33 3.33 0 0 1-3.3-3.3 3.33 3.33 0 0 1 3.3-3.3 3.33 3.33 0 0 1 3.3 3.3c-.1 1.9-1.5 3.3-3.3 3.3z"/>
              </svg>
            `;
          } else {
            return `
              <svg viewBox="0 0 50 50">
                <path fill="#9da0a2" d="M25 18.6c-4.6 0-8.4 3.8-8.4 8.4s3.8 8.4 8.4 8.4 8.4-3.8 8.4-8.4-3.7-8.4-8.4-8.4zm0 11.7a3.33 3.33 0 0 1-3.3-3.3 3.33 3.33 0 0 1 3.3-3.3 3.33 3.33 0 0 1 3.3 3.3c0 1.8-1.4 3.3-3.3 3.3zM39.2 1H10.9C9.4 1 8.3 2.1 8.3 3.6v42.9a2.65 2.65 0 0 0 2.6 2.6h28.3a2.65 2.65 0 0 0 2.6-2.6v-43C41.7 2 40.5.9 39.2 1zM25 7c1.3 0 2.4 1.1 2.4 2.4s-1.1 2.4-2.4 2.4-2.4-1.1-2.4-2.4S23.7 7 25 7zm10.3 35.5l-.4 1.9s-.2.6-.6.6H15.8c-.4 0-.6-.6-.6-.6l-.4-1.9c-.2-.9.6-.9.6-.9h19.3s.9.1.6.9zM25 38.2c-6.2 0-11.3-5.1-11.3-11.3a11.29 11.29 0 1 1 22.6 0c.1 6.3-5 11.3-11.3 11.3z"/>
              </svg>
            `;
          }
        ]]]

  icon_lamp:
    styles:
      custom_fields:
        icon_lamp:
          - top: 11%
          - left: 4.5%
          - width: 3.05vw
          - position: absolute
    custom_fields:
      icon_lamp: >
        [[[
          const state = entity.state === 'on' ? 'animate' : null;
          return `
            <svg viewBox="0 0 50 50">
              <style>
                @keyframes animate {
                  0% {
                    transform: scale(0.85);
                  }
                  20% {
                    transform: scale(1.1);
                  }
                  40% {
                    transform: scale(0.95);
                  }
                  60% {
                    transform: scale(1.03);
                  }
                  80% {
                    transform: scale(0.97);
                  }
                }
                .animate {
                  animation: animate 0.8s;
                  transform-origin: center;
                }
              </style>
              <path fill="#9da0a2" d="M26.5 21.8l3.8-6.1H19.7l3.8 6.1c-5 .7-6.3 5.8-5.7 10.2.7 5.1 3.2 10.1 5.7 14.4H19v2.5h11.8v-2.5h-4.5C29 42 31.4 37 32.1 32c.6-4.4-.6-9.4-5.6-10.2zm3.1 9.1c-.3 4.3-2.3 8.7-4.4 12.4l-.2.1v.1-.1c-1.8-3-3.3-6.4-4.1-9.7-.7-3.1-1-7.2 2.7-8.4 1.4-.5 3.1-.1 4.2.8 1.6 1 1.8 3 1.8 4.8z"/>
              <path class="${state}" fill="var(--button-card-light-color-no-temperature)" d="M38.1 20L35.7 3.8c-.3-1.9-.4-1.7-.6-2-.9-.6-2.3-.7-2.3-.7H17.4s-1.4 0-2.3.7c-.2.3-.3.1-.6 2C14 5.7 11.9 20 11.9 20s5.8.3 13.4.3h0c7.3 0 12.8-.3 12.8-.3z"/>
            </svg>
          `;
        ]]]

  icon_fan:
    styles:
      custom_fields:
        icon_fan:
          - top: 9%
          - left: 10%
          - width: 3vw
          - position: absolute
        circle:
          - display: >
              [[[ return states[entity.entity_id.replace(entity.entity_id.split('.')[0], 'input_boolean')].state === 'on' ? 'none' : 'initial'; ]]]
    custom_fields:
      icon_fan: >
        [[[
          const boolean = states[entity.entity_id.replace(entity.entity_id.split('.')[0], 'input_boolean')].state;
          const style = `
            <svg viewBox="0 0 50 50">
              <style>
                @keyframes rotate {
                  0% {
                    visibility: visible;
                    transform: rotate(0deg)
                  }
                  100% {
                    transform: rotate(1080deg)
                  }
                }
                .start {
                  animation: rotate 2.8s ease-in;
                  transform-origin: center;
                  fill: #5daeea;
                  visibility: hidden
                }
                .on_delay {
                  animation: rotate 1.8s linear infinite;
                  transform-origin: center;
                  fill: #5daeea;
                  animation-delay: 2.8s;
                  visibility: hidden
                }
                .on {
                  animation: rotate 1.8s linear infinite;
                  transform-origin: center;
                  fill: #5daeea;
                  visibility: hidden
                }
                .end {
                  animation: rotate 2.8s;
                  transform-origin: center;
                  fill: #9ca2a5;
                  animation-timing-function: cubic-bezier(.61, 1, .88, 1)
                }
              </style>
            `;
          const path = `
            <circle cx="25" cy="25" r="6.6"/>
            <path d="M31.9 30.4c-.5.6-1.1 1.1-1.7 1.5-1.4 1.1-3.2 1.7-5.2 1.7-2.3 0-4.5-.9-6-2.4-.9 1.1-1.6 2.3-2.3 3.2l-4.9 5.4c-1.8 2.7.3 5.6 2.5 7 3.9 2.4 9.8 3.1 14.1 1.9 4.6-1.3 7.9-4.7 7.4-9.7-.2-3.4-1.9-6-3.9-8.6zM17 28.3c-.4-1-.6-2.1-.6-3.3a8.7 8.7 0 0 1 6.4-8.4l-1.6-3.5L19 6.2c-1.5-2.8-5-2.5-7.3-1.2-4 2.2-7.5 6.9-8.7 11.3-1.2 4.6.2 9.2 4.7 11.3 3.1 1.3 6.1 1.2 9.3.7zm26.9-17.6c-3.3-3.4-8-4.6-12.1-1.8-2.8 1.8-4.2 4.6-5.5 7.5 4.2.6 7.4 4.2 7.4 8.6 0 .9-.1 1.7-.4 2.5 1.3.2 2.8.3 3.8.4 2.3.4 4.7 1.3 7.1 1.7 3.2.3 4.7-3 4.8-5.6.3-4.6-1.9-10.1-5.1-13.3z"/>
            `;
          if (entity.state === 'off' && boolean === 'off') {
            return `${style}<g class="end">${path}</g></svg>`;
          }
          if (entity.state === 'on' && boolean === 'off') {
            return `${style}<g class="start">${path}</g><g class="on_delay">${path}</g></svg>`;
          }
          if (entity.state === 'on' && boolean === 'on') {
            return `${style}<g class="on">${path}</g></svg>`;
          } else if (entity.state === 'off' && boolean === 'on') {
            return `${style}<g fill="#9ca2a5">${path}</g></svg>`;
          }
        ]]]

  icon_bathroom:
    styles:
      custom_fields:
        icon_bathroom:
          - top: 11%
          - left: 6.5%
          - width: 3vw
          - position: absolute
    custom_fields:
      icon_bathroom: >
        [[[
          const state = entity.state === 'on' ? 'animate_on' : 'animate_off';
          return `
            <svg viewBox="0 0 50 50" fill="var(--button-card-light-color-no-temperature)">
              <style>
                @keyframes animate_on {
                  0% {
                    transform: rotateZ(0deg) translate(0%, 0%);
                  }
                  100% {
                    transform: rotateZ(-90deg) translate(-1.5%, 0%);
                  }
                }
                @keyframes animate_off {
                  0% {
                    transform: rotateZ(-90deg) translate(-1.5%, 0%);
                  }
                  45% {
                    transform: rotateZ(-40deg);
                  }
                  55% {
                    transform: rotateZ(0deg);
                  }
                  65% {
                    transform: rotateZ(-15deg);
                  }
                  75% {
                    transform: rotateZ(0deg);
                  }
                  85% {
                    transform: rotateZ(-5deg);
                  }
                  95% {
                    transform: rotateZ(0deg);
                  }
                }
                .animate_on {
                  animation: animate_on 0.4s;
                  animation-fill-mode: forwards;
                  transform-origin: 45% 41%;
                  transition-timing-function: cubic-bezier(0.85, 0, 0.15, 1);
                }
                .animate_off {
                  animation: animate_off 1.05s linear;
                  animation-delay: 0.05s;
                  animation-fill-mode: both;
                  transform-origin: 45% 41%;
                }
              </style>
              <path d="M12.9 1.2h2.5c1.6 0 2.9 1.3 2.9 2.9v18.6c0 1.4 1.1 2.5 2.4 2.5h20.5c.5 0 1 .4.9 1-.1 2.6-1.2 9.6-10.2 11v7.6c0 .2.2.4.4.4h1.5a1.58 1.58 0 0 1 1.6 1.6v.3a1.58 1.58 0 0 1-1.6 1.6H11a1.58 1.58 0 0 1-1.6-1.6v-.3a1.58 1.58 0 0 1 1.6-1.6h1.6c.2 0 .4-.2.4-.4v-7.6s-5.2-.3-5.2-5.9V4.2c0-1.6 1.3-2.9 2.9-2.9l2.2-.1c0 .1 0 0 0 0z"/>
              <path class="${state}" d="M22.3 18.8h18.3a1.58 1.58 0 0 1 1.6 1.6v.6a1.58 1.58 0 0 1-1.6 1.6h-19c-.4 0-.7-.3-.8-.7v-2.3c0-.4.3-.7.7-.8h.8z"/>
            </svg>
          `;
        ]]]

  icon_fan2:
    styles:
      custom_fields:
        icon_fan2:
          - top: 9%
          - left: 10%
          - width: 3vw
          - position: absolute
    custom_fields:
      icon_fan2: >
        [[[
          const path = `
            <circle cx="25" cy="25" r="6.6"/>
            <path d="M31.9 30.4c-.5.6-1.1 1.1-1.7 1.5-1.4 1.1-3.2 1.7-5.2 1.7-2.3 0-4.5-.9-6-2.4-.9 1.1-1.6 2.3-2.3 3.2l-4.9 5.4c-1.8 2.7.3 5.6 2.5 7 3.9 2.4 9.8 3.1 14.1 1.9 4.6-1.3 7.9-4.7 7.4-9.7-.2-3.4-1.9-6-3.9-8.6zM17 28.3c-.4-1-.6-2.1-.6-3.3a8.7 8.7 0 0 1 6.4-8.4l-1.6-3.5L19 6.2c-1.5-2.8-5-2.5-7.3-1.2-4 2.2-7.5 6.9-8.7 11.3-1.2 4.6.2 9.2 4.7 11.3 3.1 1.3 6.1 1.2 9.3.7zm26.9-17.6c-3.3-3.4-8-4.6-12.1-1.8-2.8 1.8-4.2 4.6-5.5 7.5 4.2.6 7.4 4.2 7.4 8.6 0 .9-.1 1.7-.4 2.5 1.3.2 2.8.3 3.8.4 2.3.4 4.7 1.3 7.1 1.7 3.2.3 4.7-3 4.8-5.6.3-4.6-1.9-10.1-5.1-13.3z"/>
          `;
          const style = `
            <svg viewBox="0 0 50 50">
              <style>
                @keyframes rotate {
                  0% {
                    visibility: visible;
                    transform: rotate(0deg);
                  }
                  100% {
                    transform: rotate(1080deg);
                  }
                }
                .start {
                  animation: rotate 2.8s ease-in;
                  transform-origin: center;
                  fill: #5daeea;
                  visibility: hidden;
                }
                .on {
                  animation: rotate 1.8s linear infinite;
                  transform-origin: center;
                  fill: #5daeea;
                  animation-delay: 2.8s;
                  visibility: hidden;
                }
                .end {
                  animation: rotate 2.8s;
                  transform-origin: center;
                  fill: #9ca2a5;
                  animation-timing-function: cubic-bezier(0.61, 1, 0.88, 1);
                }
              </style>
          `;
          if (entity.state === 'on') {
            return `${style}<g class="start">${path}</g><g class="on">${path}</g></svg>`;
          } else {
            return `${style}<g class="end">${path}</g></svg>`;
          }
        ]]]

  icon_closet:
    styles:
      custom_fields:
        icon_closet:
          - top: 11%
          - left: 4.1%
          - width: 3.2vw
          - position: absolute
    custom_fields:
      icon_closet: >
        [[[
          const state = entity.state === 'on' ? 'door' : 'door reverse';
          const opacity = entity.state === 'on' ? 'room' : 'room reverse';
          return `
            <svg viewBox="0 0 50 50">
              <style>
                .door {
                  animation: door 0.4s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
                }
                .room {
                  animation: room 0.4s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
                }
                .reverse {
                  animation-direction: reverse;
                }
                @keyframes door {
                  0% {
                    transform: none;
                    fill: #9da0a2;
                  }
                  100% {
                    transform: skewY(10deg) translate(4.5%, -3.9%) scaleX(0.8);
                    fill: #b68349;
                  }
                }
                @keyframes room {
                  0% {
                    opacity: 0;
                  }
                  100% {
                    opacity: 1;
                  }
                }
              </style>
              <path class="${opacity}" d="M11.4,1.4h27.2v43.1H11.4V1.4z" fill="#bcbcbc"/>
              <path class="${state}" d="M11.4 1.4v43.1h27.2V1.4H11.4zm23 23.4c0 1.1-.9 1.9-1.9 1.9h0c-1.1 0-1.9-.9-1.9-1.9V21c0-1.1.9-1.9 1.9-1.9h0c1.1 0 1.9.9 1.9 1.9v3.8z"/>
            </svg>
          `;
        ]]]

  icon_away:
    styles:
      custom_fields:
        icon_away:
          - top: 10%
          - left: 10.1%
          - width: 3.1vw
          - position: absolute
          - fill: >
              [[[ return entity.state === 'on' ? '#516d82' : '#9da0a2'; ]]]
    custom_fields:
      icon_away: >
        [[[
          const state = entity.state === 'on' ? 'animate' : null;
          return `
            <svg viewBox="0 0 50 50">
              <style>
                @keyframes animate {
                  10%,
                  20%,
                  100% {
                    transform: rotateZ(0deg);
                  }
                  30%,
                  50%,
                  70% {
                    transform: rotateZ(7deg);
                  }
                  90% {
                    transform: rotateZ(3deg);
                  }
                  40%,
                  60%,
                  80% {
                    transform: rotateZ(-7deg);
                  }
                }
                .animate {
                  animation: animate 1.35s cubic-bezier(0.5, 1, 0.89, 1);
                  animation-fill-mode: both;
                  transform-origin: 70% 80%;
                  animation-delay: 0s;
                }
              </style>
              <path class="${state}" d="M32.1 18.4s.3-1.6.7-2.1c.3-.6.9-1.4 1.6-1.8.6-.4 1.1-.7 1.4-.7s.7-.1 1 .1.6.4.8 1.3l.3 2.7.1 2.4.2 4.1c0 .3.2 3.1.2 3.3s.2 2.7.2 3.2l-.1 2.5c.1 1.6.5 3.1-.2 4.6-.6 1.4-1.7 2.7-2.9 3.6-.5.4-1.9 1.3-2.9 1.7-1.1.5-2.2.8-3.3 1.1-.5.1-1.4.4-2.3.3s-1.8-.6-2.1-1l-1.6-2.3c-.6-.8-2.1-2.3-2.3-2.5l-2.7-2.8c-.2-.2-2.7-3.5-2.9-3.8l-3.1-4.7-1.8-3.2-1.5-2.8-.9-1.8c-.1-.2-.3-1.1-.2-1.4.3-1.2 1.4-1.4 2.3-.7.3.2.9 1 1.1 1.3s6.1 8.1 6.1 8.1c.2.3.7.3.9 0s-.1-.7-.2-.9c-.4-.6-8.3-11.5-8.3-11.5s-.6-.9-.7-1.1c-.3-1.1 0-2.3 1.1-2.7s1.9.3 2.6 1.1c.3.3 8.3 11.5 8.3 11.5.2.2.3.3.5.3.3 0 .5-.4.4-.7-.1-.2-.5-.9-.5-.9L11.8 9c-.6-1-.9-2-.1-3 .7-.8 2.2-1.3 3-.2.3.3 10.1 14.3 10.1 14.3.2.2.5.4.7.3.5-.1.3-.7.1-1-.1-.2-8.4-11.8-8.4-11.8-.4-.9-.6-2 .2-2.8 1-1.1 2.5-.5 3.3.5.2.3 1 1.4 1 1.4l2.7 3.7c.1.2 3.4 4.4 3.8 4.8.9 1.1 1.8 2.2 2.7 3.2l.5.5c.1.1.1.4.1.8 0 1.3.1 2.6.1 3.9 0 .2.1.4.2.6.3.3.6.1.7-.2.1-.2 0-2.4 0-2.7-.3-.3-.5-1.3-.4-2.9zM12.2 46.9s-2.8-.8-4.8-2.7-2.6-2.7-2.8-3-1.8-3-2-3.6c-.2-.5-.2-.7.2-1 .4-.4 1-.5 1.3.1.1.2.4 1 .5 1.2s1 1.9 1.7 2.8 1.6 2.2 4.4 3.8c.6.3 1.2.6 1.9.9.3.1.6.2.8.4.1.2.1.6-.1.8-.2.4-.7.4-1.1.3zM7.1 30.7l.9 3.1c.3.7 1.1 2.3 1.9 3.3s2.4 2.6 3.4 3.2 2 1.1 3 1.5c1 .3 1.1.4 1.2.5.3.4.2 1.2-.4 1.3-.2 0-1.2 0-1.8-.3L12 41.7c-.5-.4-3.9-3.1-5.1-6S5.3 31 5.2 30.4s-.2-1.1 0-1.4c.3-.4.9-.8 1.3-.3.2.3.3.6.3.9.1 0 .2.8.3 1.1zm26.8-25s.2-.1.5-.1.8.3 1.4.7 1.9 1 3.6 2.9 2.9 3.9 3.4 5.8c.5 1.8.8 3.1.9 5.5 0 .5.1 1.6 0 1.7-.2.5-.5.7-1 .7-.6 0-.7-.5-.7-1l-.1-2.9c-.1-.6-.3-1.9-.7-2.9-.3-1-.7-2.3-1.7-3.6-.9-1.3-2.1-2.8-3.2-3.5l-2.4-1.5c-.6-.6-.7-1.2 0-1.8zm4.9-2.5s.3-.2.5-.1c.2 0 .7.3.9.4s2.1 1.3 3.6 3c1.5 1.6 3.5 5.1 3.7 7.4.1.4.2.9 0 1-.2.2-.4.4-.7.4-.2 0-.5 0-.7-.1-.1-.2-.4-1.1-.4-1.3s-.6-2-1.1-3.1C44 9.7 43.5 8.5 42 7.1s-2.2-1.9-2.8-2.2-1.1-.6-1.1-1c.1-.3.3-.6.7-.7z"/>
            </svg>
          `;
        ]]]

  icon_home:
    styles:
      custom_fields:
        icon_home:
          - top: 10.5%
          - left: 10.1%
          - width: 2.9vw
          - position: absolute
          - fill: >
              [[[ return entity.state === 'on' ? '#c7983e' : '#9da0a2'; ]]]
    custom_fields:
      icon_home: >
        [[[
          const state = entity.state === 'on' ? 'animate' : null;
          return `
            <svg viewBox="0 0 50 50">
              <style>
                @keyframes animate {
                  from,
                  20%,
                  40%,
                  60%,
                  80%,
                  to {
                    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
                  }
                  0% {
                    transform: scale(0.3);
                  }
                  20% {
                    transform: scale(1.1);
                  }
                  40% {
                    transform: scale(0.9);
                  }
                  60% {
                    transform: scale(1.03);
                  }
                  80% {
                    transform: scale(0.97);
                  }
                  to {
                    transform: scale(1);
                  }
                }
                .animate {
                  animation: animate 1s;
                  transform-origin: center;
                }
              </style>
              <path class="${state}" d="M42.2 28.3c0-.8-.2-1-.2-1L26 12.1s-.5-.4-1-.4-1 .3-1 .3L8.2 27.1c-.4.5-.4.9-.4.9v18.3c0 1.1.9 2 1.9 2h8.2a1.47 1.47 0 0 0 1.5-1.5v-14a1.47 1.47 0 0 1 1.5-1.5h8.4a1.47 1.47 0 0 1 1.5 1.5v14a1.47 1.47 0 0 0 1.5 1.5h8.2c1.1 0 2-.9 2-1.9 0-.2-.3-18.1-.3-18.1zM7.3 25l-1.6 1.5s-.3.3-.5.3-.5 0-.8-.2c-.2-.2-2-2.8-2-2.8s-.1-.4-.1-.7c.1-.3.2-.7.3-.8.4-.1 21.5-20.1 21.5-20.1s.4-.3.9-.3c.4 0 .8.1.9.2s.5.4.5.4l8.9 8.5V6s.1-.4.2-.7c.1-.2.3-.3.4-.3s.3-.1.3-.1h3s.3.1.4.3a1.08 1.08 0 0 1 .3.7v9.8l7.2 6.9s.2.3.3.4c.1.2.1.7.1.7 0 .1-.1.4-.2.5s-1.6 2.5-1.6 2.5-.1.3-.3.3c-.2.1-.4.1-.7 0-.2-.1-.5-.4-.5-.4L26.4 9.4s-.3-.3-.5-.4-.4-.2-.8-.2-.5.1-.8.1c-.1.1-.4.3-.7.5C23.3 9.8 7.3 25 7.3 25z"/>
            </svg>
          `;
        ]]]
