
binary_sensor:

    ####################################################
    #                                                  #
    #                      BINARY                      #
    #                                                  #
    ####################################################


  - platform: ping
    host: 8.8.8.8
    name: server_internet_access
  

  - platform: mqtt
    name: "Front Door Motion"
    state_topic: "home/frontdoor/camera/motion"
    payload_on: "ON"
    payload_off: "OFF"
    device_class: motion


  - platform: template
    sensors:
      fullykiosk_motion:
        friendly_name: Camera
        icon_template: mdi:camera
        value_template: >
          {{ not is_state_attr('sensor.fullykiosk', 'motionDetectorState', 0) }}

      night_mode:
        friendly_name: Night Mode
        value_template: >-
          {{ is_state('switch.adaptive_lighting_sleep_mode_teddy_s_room', 'on') 
            or is_state('switch.adaptive_lighting_sleep_mode_ollie_s_room', 'on') }}

      morning_meds_taken:
        friendly_name: Morning Meds Taken
        value_template: >-
          {% if is_state('input_boolean.morning_meds_taken', 'on') %}
            Yes
          {% else %}
            No
          {% endif %}

      evening_meds_taken:
        friendly_name: Evening Meds Taken
        value_template: >-
          {% if is_state('input_boolean.evening_meds_taken', 'on') %}
            Yes
          {% else %}
            No
          {% endif %}

      bedtime_meds_taken:
        friendly_name: Bedtime Meds Taken
        value_template: >-
          {% if is_state('input_boolean.bedtime_meds_taken', 'on') %}
            Yes
          {% else %}
            No
          {% endif %}

sensor:

    ####################################################
    #                                                  #
    #                     SENSORS                      #
    #                                                  #
    ####################################################

  - platform: version
    name: hass_version_installed

  - platform: version
    name: hass_version_latest
    source: docker

  - platform: version
    name: hass_version_latest_beta
    beta: true
    source: docker

  - platform: filesize
    file_paths:
      - /config/home-assistant_v2.db
      - /config/home-assistant.log

  - platform: systemmonitor
    resources:
      - type: disk_use_percent
        arg: /
      - type: memory_use_percent
      - type: processor_use
      - type: last_boot

  - platform: uptime

  - platform: time_date
    display_options:
      ['time', 'date']

  - platform: rest
    name: hass_release_notes
    resource: https://api.github.com/repos/home-assistant/core/releases/latest
    value_template: '{{ value_json.name }}'
    json_attributes: [body]
    scan_interval: 21600

  - platform: dnsip

  - platform: darksky
    api_key: !secret darksky_key
    language: en
    monitored_conditions:
      ['precip_probability', 'temperature', 'apparent_temperature']

  #- platform: rest
  #  name: fullykiosk
  #  json_attributes:
  #    ['batteryLevel', 'screenBrightness', 'plugged', 'motionDetectorState', 
  #    'lastAppStart', 'internalStorageFreeSpace', 'internalStorageTotalSpace', 
  #    'ramFreeMemory', 'ramTotalMemory', 'currentFragment']
  #  resource: !secret fullykiosk_rest_resource
  #  value_template: '{{ value_json.isScreenOn }}'
  #  scan_interval: 10

  - platform: plex_recently_added
    name: Recently Added Movies # will create sensor.recently_added_movies
    token: !secret plex_token
    host: !secret plex_host
    port: 32400
    section_types:
    - movie

  - platform: plex_recently_added
    name: Recently Added TV  # will create sensor.recently_added_tv
    token: !secret plex_token
    host: !secret plex_host
    port: 32400
    section_types:
    - show


    ####################################################
    #                                                  #
    #                   COMMAND LINE                   #
    #                                                  #
    ####################################################

  

    ####################################################
    #                                                  #
    #                     TEMPLATE                     #
    #                                                  #
    ####################################################

  - platform: template
    sensors:
      sidebar_greeting:
        #entity_id: sensor.time
        value_template: >
          {% set time = strptime(states('sensor.time'), "%H:%M").hour %}
          {% if time <= 1 %} Good evening {{'\U0001F611'}}
          {% elif time <= 3 %} Good morning {{'\U0001F62A'}}
          {% elif time <= 5 %} Good morning {{'\U0001F634'}}
          {% elif time <= 7 %} Good morning {{'\u2615\uFE0F'}}
          {% elif time <= 8 %} Good morning {{'\u2615\uFE0F'}}
          {% elif time <= 9 %} Good morning {{'\u2615\uFE0F'}}
          {% elif time <= 12 %} Good morning {{'\U0001F642'}}
          {% elif time <= 13 %} Good afternoon {{'\U0001F60A'}}
          {% elif time <= 15 %} Good afternoon {{'\U0001F60E'}}
          {% elif time <= 17 %} Good afternoon {{'\U0001F44B\U0001F3FB'}}
          {% elif time <= 19 %} Good evening {{'\U0001F44B\U0001F3FB'}}
          {% elif time <= 22 %} Good evening {{'\U0001F60C'}}
          {% elif time <= 23 %} Good evening {{'\U0001F974'}}
          {% else %} Good evening {{'\U0001F974'}}
          {% endif %}

      sidebar_active:
        value_template: >
          {% set lights = [states.light.bedroom_lamps, states.light.kitchen_lights, states.light.ollie_s_lamp, states.light.teddy_s_lamp, 
          states.light.lounge_room_lamp] %}
          {% set lights_on = lights | selectattr('state','eq','on') | list %}
          {% set lights_name = lights | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

          {% set switches = [states.media_player.bedroom_tv, states.media_player.lounge_room_tv] %}
          {% set switches_on = switches | selectattr('state','eq','on') | list %} 
          {% set switches_name = switches | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

          {% set speakers = [states.media_player.bedroom_speaker, states.media_player.kitchen_display, states.media_player.teddy_s_speaker,
          states.media_player.ollie_s_speaker] %}
          {% set speakers_on = speakers | selectattr('state','eq','playing') | list %} 
          {% set speakers_name = speakers | selectattr('state','eq','playing') | map(attribute='name') | join(', ') %}

          {% set doors = [states.binary_sensor.back_door, states.binary_sensor.garage_door] %}
          {% set doors_on = doors | selectattr('state','eq','on') | list %} 
          {% set doors_name = doors | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

          {% if (lights_on | length == 0 ) and (speakers_on | length == 0 ) and (doors_on | length == 0) and (switches_on | length > 0) %} 
          The {{ switches_name | regex_replace(',([^,]*)$',' and\\1') }} are on

          {% elif (lights_on | length == 0) and (switches_on | length == 0) and (doors_on | length == 0) and (speakers_on | length == 1)%}
          The {{ speakers_name }} is playing

          {% elif (lights_on | length == 0) and (switches_on | length == 0) and (doors_on | length == 1) and (speakers_on | length == 0)%}
          The {{ doors_name }} is open

          {% elif (lights_on | length == 1) and (switches_on | length == 1) and (speakers_on | length == 1) and (doors_on | length == 1) %}
          The {{ lights_name }} and {{switches_name }} are on. The {{ doors_name }} is open. The{{ speakers_name }} is playing

          {% elif (lights_on | length == 1) and (speakers_on | length == 1) and (doors_on | length == 1) and (switches_on | length > 1) %}
          The {{ lights_name }}, {{ switches_name | regex_replace(',([^,]*)$',' and\\1') }} are on. The {{ doors_name }} is open. The{{ speakers_name }} is playing.

          {% elif (lights_on | length > 1) and (speakers_on | length == 1) and (switches_on | length == 1) and (doors_on | length == 1) %}
          There are {{ lights_on | length }} lights and the {{ switches_name }} are on. The {{ doors_name }} is open. The {{ speakers_name }} is playing.

          {% elif (lights_on | length == 1) and (speakers_on | length == 1) and (doors_on | length > 1) and (switches_on | length == 1) %}
          The {{ lights_name }} and {{ switches_name }} are on. The {{ doors_name | regex_replace(',([^,]*)$',' and\\1') }} are open. The {{ speakers_name }} is playing.

          {% elif (lights_on | length > 1 ) and (speakers_on | length > 1) and (switches_on | length > 1) and (doors_on | length > 1) %}
          There are {{ lights_on | length }} lights on, the {{ switches_name | regex_replace(',([^,]*)$',' and\\1') }} are on, {{ doors_on | length }} doors open, and there are {{ speakers_on | length}} speakers playing.

          {% elif (lights_on | length == 1) and (speakers_on | length == 0) and (switches_on | length == 0) and (doors_on | length == 0) %}
          {{ lights_name }} is on.

          {% elif (lights_on | length > 1 ) and (speakers_on | length == 0) and (switches_on | length == 0) and (doors_on | length == 0) %}
          There are {{ lights_on | length}} lights on.

          {% elif (lights_on | length > 1 ) and (speakers_on | length == 1) and (switches_on | length == 0) and (doors_on | length == 0) %}
          There are {{ lights_on | length}} lights on and the {{ speakers_name }} is playing.

          {% elif (lights_on | length > 1 ) and (speakers_on | length == 1) and (switches_on | length == 1) and (doors_on | length == 0) %}
          There are {{ lights_on | length}} lights on, and the {{ switches_name }} is on. The {{ speakers_name }} is playing.

          {% elif (lights_on | length == 1 ) and (speakers_on | length == 0) and (switches_on | length == 1) and (doors_on | length == 0) %}
          {{ lights_name }} is on, and the {{ switches_name }} is on.

          {% elif (lights_on | length == 1) and (speakers_on | length == 1) and (switches_on | length == 0) and (doors_on | length == 0) %}
          {{ lights_name }} is on and the {{ speakers_name }} is playing.

          {% elif (lights_on | length == 0) and (speakers_on | length == 1) and (switches_on | length == 0) and (doors_on | length == 1) %}
          The {{ speakers_name }} is playing and the {{ doors_name }} is open.

          {% elif (lights_on | length == 1) and (speakers_on | length == 1) and (switches_on | length == 0) and (doors_on | length == 1) %}
          {{ lights_name }} is on, the {{ doors_on }} is open, and the {{ speakers_name }} is playing.

          {% elif (lights_on | length == 1) and (speakers_on | length == 0) and (switches_on | length == 0) and (doors_on | length == 1) %}
          {{ lights_name }} is on, and the {{ doors_name }} is open.

          {% elif (lights_on | length > 1) and (speakers_on | length == 1) and (switches_on | length == 0) and (doors_on | length == 1) %}
          There are {{ lights_on | length}} lights on, the {{ doors_on }} is open, and the {{ speakers_name }} is playing.

          {% elif (lights_on | length > 1) and (speakers_on | length == 0) and (switches_on | length == 0) and (doors_on | length > 1) %}
          There are {{ lights_on | length}} lights on and the {{ doors_name | regex_replace(',([^,]*)$',' and\\1') }} are open.

          {% elif (lights_on | length > 1) and (speakers_on | length > 1) and (switches_on | length == 0) and (doors_on | length == 1) %}
          There are {{ lights_on | length}} lights on, the {{ doors_name }} is open and there are {{ speakers_on | length }} speakers playing.

          {% elif (lights_on | length > 1) and (speakers_on | length > 1) and (switches_on | length == 0) and (doors_on | length == 0) %}
          There are {{ lights_on | length}} lights on, and {{ speakers_on | length }} speakers playing.

          {% elif (lights_on | length == 0) and (speakers_on | length > 1) and (switches_on | length == 0) and (doors_on | length == 0) %}
          There are {{ speakers_on | length }} speakers playing.

          {% elif (lights_on | length == 1) and (speakers_on | length > 1) and (switches_on | length == 0) and (doors_on | length == 0) %}
          The {{ lights_name }} is on and {{ speakers_on | length }} speakers playing.

          {% elif (lights_on | length > 1) and (speakers_on | length == 0) and (switches_on | length == 1) and (doors_on | length == 0) %}
          There are {{ lights_on | length}} lights on, and {{ switches_name }} is on.

          {% elif (lights_on | length > 1) and (speakers_on | length == 0) and (switches_on | length == 0) and (doors_on | length == 1) %}
          There are {{ lights_on | length}} lights on and the {{ doors_on }} is open.

          {% elif (lights_on | length == 0) and (speakers_on | length == 1) and (switches_on | length == 0) and (doors_on | length == 1) %}
          The {{ doors_name }} is open and the {{ speakers_name }} is playing.

          {% else %} 
          <font color='#6a7377'>Everything is off</font> 
          {% endif %}

      sidebar_weather:
        #entity_id: sensor.dark_sky_temperature, sensor.dark_sky_apparent_temperature, sensor.dark_sky_precip_probability
        value_template: >
          {% set temperature = states('sensor.dark_sky_temperature') %}
          {% set type = states('weather.dark_sky') %}
          {% set apparent = states('sensor.dark_sky_apparent_temperature') | round %}
          {% set precip = states('sensor.dark_sky_precip_probability') | round %}

          {% if not is_state('sensor.dark_sky_temperature', 'unknown') %}
              It's' {{ apparent}}° and {{ type }}
          {% else %}
            Unable to load weather information...
          {% endif %}

      day:
        value_template: >
          {% set days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"] %}
          {{ strptime(states('sensor.date'), '%Y-%m-%dd').day }}
          {{ days[now().weekday()] }}
      month:
        value_template: >
          {% set months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] %}
          {{ strptime(states('sensor.date'), '%Y-%m-%d').day }}
          {{ months[now().month-1] }}
      date_string:
        friendly_name: "Full Date"
        value_template: "{{ states('sensor.day') }}, {{ states('sensor.month') }} {{ now().year }}"

      12hr_time:
        friendly_name: '12hr Time'
        value_template: >
          {% set time = states('sensor.time') %}
          {% set hour = time[:2]|int %}
          {{ '{:02d}:{}{}'.format(hour if hour == 12 else hour % 12, time[3:5], 'pm' if hour>11 else 'am') }}

      outside_temp:
        friendly_name: "Outside Temp"
        value_template: "{{ state_attr('weather.warner','temperature') }}"

      placeholder:
        value_template: ' '
      
      bedroom_presence:
        unique_id: "bedroom-presence-template-sensor"
        friendly_name: "Bedroom Presence"
        device_class: "presence"
        value_template: "{{ is_state('sensor.device_name', 'bedroom') }}"

      hass_version:
        #entity_id: sensor.hass_version_installed, sensor.hass_version_latest
        icon_template: mdi:home-assistant
        friendly_name_template: >
          Installed {{ states('sensor.hass_version_installed') }}
        value_template: >
          {{ 'Latest' if states('sensor.hass_version_installed') == 
          states('sensor.hass_version_latest') else states('sensor.hass_version_latest') }}

    ####################################################
    #                                                  #
    #                      TABLET                      #
    #                                                  #
    ####################################################

      fullykiosk_plugged:
        #entity_id: sensor.fullykiosk
        friendly_name: Strömsladd ansluten
        value_template: >
          {{ 'Ja' if is_state_attr('sensor.fullykiosk', 'plugged', true) else 'Nej' }}
        icon_template: >
          mdi:power-plug{{ '-off' if is_state_attr('sensor.fullykiosk', 'plugged', false) }}

      fullykiosk_storage:
        #entity_id: sensor.fullykiosk
        friendly_name: Storage
        icon_template: mdi:sd
        unit_of_measurement: '%'
        value_template: >
          {% set entity_id = 'sensor.fullykiosk' %}
          {% set FreeSpace = state_attr(entity_id, 'internalStorageFreeSpace') %}
          {% set TotalSpace = state_attr(entity_id, 'internalStorageTotalSpace') %}
          {% if not (FreeSpace == None or TotalSpace == None) %}
            {{ 100 - (FreeSpace / TotalSpace * 100) | int }}
          {% endif %}

      fullykiosk_memory:
        #entity_id: sensor.fullykiosk
        friendly_name: Memory
        icon_template: mdi:memory
        unit_of_measurement: '%'
        value_template: >
          {% set entity_id = 'sensor.fullykiosk' %}
          {% set FreeMemory = state_attr(entity_id, 'ramFreeMemory') %}
          {% set TotalMemory = state_attr(entity_id, 'ramTotalMemory') %}
          {% if not (FreeMemory == None or TotalMemory == None) %}
            {{ 100 - (FreeMemory / TotalMemory * 100) | int }}
          {% endif %}

      fullykiosk_battery:
        #entity_id: sensor.fullykiosk
        friendly_name: Battery
        unit_of_measurement: '%'
        value_template: >
          {{ state_attr('sensor.fullykiosk', 'batteryLevel') }}
        icon_template: >
          {% set battery = (state_attr('sensor.fullykiosk', 'batteryLevel') | int / 10) | int * 10 | default(0) %}
            mdi:battery{% if battery == 100 %}{% elif battery > 0 %}-{{ battery }}{% else %}-alert
          {% endif %}

    ####################################################
    #                                                  #
    #                      DATE                        #
    #                                                  #
    ####################################################

      sidebar_day:
        #entity_id: sensor.date
        icon_template: mdi:calendar
        value_template: "{{ ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'][now().weekday()] }}"

      sidebar_date:
        #entity_id: sensor.date
        icon_template: mdi:calendar
        value_template: >
          {% set months = ['January', 'February', 'March', 'April', 'May', 'June', 
          'July', 'august', 'September', 'October', 'November', 'December'] %}
          {{ strptime(states('sensor.date'), '%Y-%m-%d').day }} {{ months[now().month-1] }}

      hass_uptime:
        #entity_id: sensor.time, sensor.uptime
        friendly_name: Last Restart
        icon_template: mdi:update
        value_template: >
          {% set uptime = states('sensor.uptime') | float %}
          {% if uptime < 1 %} {{ (uptime * 60) | int }} seconds ago
          {% elif uptime | int == 1 %} 1 minute ago
          {% elif uptime | int > 1 %}
            {% if uptime | int < 60 %} {{ uptime | int }} minutes ago
            {% elif uptime | int / 60 == 24 %} {{ (uptime | int / 60 / 24) | int }} day ago
            {% elif uptime | int / 60 >= 24 %} {{ (uptime | int / 60 / 24) | int }} days ago
            {% elif uptime | int >= 60 and uptime | int < 120 %} {{ (uptime | int / 60) | int }} an hour ago
            {% elif uptime | int >= 120 %} {{ (uptime | int / 60) | int }} hours ago
            {% endif %}
          {% endif %}
